---
import { Skeleton } from "@/components/ui/skeleton";
import { cn } from "@/lib/utils";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
// a responsive image component with skeleton ui as placeholder
// by default, it uses normal html img tag
// if useAstroImage is true, it uses astro Image component to optimize the image

interface Props extends Omit<astroHTML.JSX.ImgHTMLAttributes, "src"> {
	className?: string;
	useAstroImage?: boolean;
	quality?: number; // only works when useAstroImage is true
	src: string | ImageMetadata;
	width: number;
	height: number;
	alt: string;
	skeletonClassName?: string; // to edit how the placeholder looks
}
const {
	src,
	alt,
	width,
	height,
	className = "",
	loading = "lazy",
	useAstroImage = false,
	quality = 90,
	skeletonClassName = "",
	...restProps
} = Astro.props;

const aspectRatio = width && height ? `${width} / ${height}` : undefined;
const showAltText = width && height && width > 100 && height > 100;
---

<div
	class={cn("relative w-full overflow-hidden", className)}
	style={{
		aspectRatio: aspectRatio,
		maxWidth: width ? `${width}px` : undefined,
	}}
>
	<!-- fallback for users with JS disabled -->
	<noscript>
		{
			useAstroImage ? (
				<Image
					{...(restProps as any)}
					src={src}
					alt={alt}
					width={width}
					height={height}
					class="absolute top-0 left-0 z-10 h-full w-full object-cover"
					quality={quality}
				/>
			) : (
				<img
					{...restProps}
					src={typeof src === "string" ? src : src.src}
					alt={alt}
					width={width}
					height={height}
					class="absolute top-0 left-0 z-10 h-full w-full object-cover"
					loading={loading}
				/>
			)
		}
	</noscript>
	<Skeleton
		className={cn(
			"error-skeleton absolute top-0 left-0 h-full w-full rounded-none",
			skeletonClassName,
		)}
	/>
	<!-- error msg -->
	<div
		class="error-icon absolute inset-0 hidden flex-col items-center justify-center text-red-600"
	>
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			class="h-[30%] max-h-[40px] min-h-[30px] w-[30%] max-w-[40px] min-w-[30px]"
		>
			<circle cx="12" cy="12" r="10"></circle>
			<line x1="12" y1="8" x2="12" y2="12"></line>
			<line x1="12" y1="16" x2="12.01" y2="16"></line>
		</svg>
		{showAltText && <span class="mt-2 px-2 text-center text-sm">{alt}</span>}
	</div>
	{
		useAstroImage ? (
			<Image
				{...(restProps as any)}
				src={src}
				alt={alt}
				width={width}
				height={height}
				class="absolute top-0 left-0 h-full w-full object-cover opacity-0 transition-opacity duration-300"
				onload="this.classList.remove('opacity-0');"
				onerror="this.previousElementSibling.style.display = 'flex'; this.previousElementSibling.previousElementSibling.classList.add('pause-animation');"
				quality={quality}
			/>
		) : (
			<img
				{...restProps}
				src={typeof src === "string" ? src : src.src}
				alt={alt}
				width={width}
				height={height}
				class="absolute top-0 left-0 h-full w-full object-cover opacity-0 transition-opacity duration-300"
				loading={loading}
				onload="this.classList.remove('opacity-0');"
				onerror="this.previousElementSibling.style.display = 'flex'; this.previousElementSibling.previousElementSibling.classList.add('pause-animation');"
			/>
		)
	}
</div>

<style>
	.pause-animation {
		animation-play-state: paused !important;
	}

	/* Hide JavaScript image when JS is disabled */
	html:not(:has(script)) img:not(noscript img) {
		display: none;
	}

	/* Show noscript image when JS is disabled */
	html:not(:has(script)) noscript img {
		opacity: 1;
	}
</style>
